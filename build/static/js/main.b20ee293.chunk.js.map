{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["NoMatchExample","to","exact","path","Home","WillMatch","NoMatch","location","useLocation","pathname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAmBe,SAASA,IACtB,OACE,cAAC,IAAD,UACE,gCACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,aAAT,2CAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,cAAT,0BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,kBAAT,8BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,uBAAT,sCAIJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,aAAZ,SACE,cAAC,IAAD,CAAUF,GAAG,kBAEf,cAAC,IAAD,CAAOE,KAAK,cAAZ,SACE,cAACE,EAAD,MAEF,cAAC,IAAD,CAAOF,KAAK,IAAZ,SACE,cAACG,EAAD,cAQZ,SAASF,IACP,OAAO,sCAGT,SAASC,IACP,OAAO,0CAGT,SAASC,IACP,IAAIC,EAAWC,cAEf,OACE,8BACE,0DACqB,+BAAOD,EAASE,gBC1E3C,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b20ee293.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n  useLocation\n} from \"react-router-dom\";\n\n// You can use the last <Route> in a <Switch> as a kind of\n// \"fallback\" route, to catch 404 errors.\n//\n// There are a few useful things to note about this example:\n//\n// - A <Switch> renders the first child <Route> that matches\n// - A <Redirect> may be used to redirect old URLs to new ones\n// - A <Route path=\"*> always matches\n\nexport default function NoMatchExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/old-match\">Old Match, to be redirected</Link>\n          </li>\n          <li>\n            <Link to=\"/will-match\">Will Match</Link>\n          </li>\n          <li>\n            <Link to=\"/will-not-match\">Will Not Match</Link>\n          </li>\n          <li>\n            <Link to=\"/also/will/not/match\">Also Will Not Match</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/old-match\">\n            <Redirect to=\"/will-match\" />\n          </Route>\n          <Route path=\"/will-match\">\n            <WillMatch />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h3>Home</h3>;\n}\n\nfunction WillMatch() {\n  return <h3>Matched!</h3>;\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        Errorï¼šNo match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}